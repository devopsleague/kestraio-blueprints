id: dlt_duckdb_python
namespace: sanitychecks

tasks:

  - id: write
    type: io.kestra.plugin.core.storage.Write
    content: |
      import dlt
      import requests

      pipeline = dlt.pipeline(
          pipeline_name='product_pipeline',
          destination='duckdb',
          dataset_name='product_data'
      )
      data = []
      for product in list(range(1, 50)):
          response = requests.get(f'https://dummyjson.com/products/{product}')
          response.raise_for_status()
          data.append(response.json())
      # Extract, normalize, and load the data
      print(data)
      pipeline.run(data, table_name='product')
    extension: .py

  - id: upload
    type: io.kestra.plugin.core.namespace.UploadFiles
    filesMap:
      ingest.py: "{{ outputs.write.uri }}"
    namespace: "{{ flow.namespace }}"

  - id: product_api_to_duckdb
    type: io.kestra.plugin.scripts.python.Commands
    containerImage: python:3.10.16-slim
    namespaceFiles:
      enabled: true
    beforeCommands:
      - pip install dlt[duckdb]
    warningOnStdErr: false
    commands:
      - python ingest.py
      - ls -altr
    outputFiles:
      - product_pipeline.duckdb

  - id: duckdb
    type: io.kestra.plugin.jdbc.duckdb.Query
    inputFiles:
      data.duckdb: "{{ outputs.product_api_to_duckdb.outputFiles['product_pipeline.duckdb']}}"
    sql: |
      ATTACH '{{workingDir}}/data.duckdb' AS data;
      SELECT category, SUM(price) AS sum_price FROM data.product_data.product GROUP BY 1 ORDER BY 2;
    fetchType: STORE

  - id: assert
    type: io.kestra.plugin.core.execution.Assert
    conditions:
      - "{{ fromIon(read(outputs.duckdb['uri'])).category == 'kitchen-accessories' }}"
      - "{{ fromIon(read(outputs.duckdb['uri'])).sum_price == 13.98 }}"
      
